Next homework: heuristic
Greedy paradigm: Nearest Neighbor

I have to visit all the vertex, starting from the node (x,y) I move to the node with smaller distance that was not already visited.
After all the nodes have been visited, I go back to the first one.

We can use an array of nnodes elements and a pointer to an element (or an int with the position). 
At each iteration we check the distances between the current node and all the next ones, the node with min distance will be
swapped with the next element and the next element will become the current one.
The elements before the current one are the visited one and are ordered.
The initialization can be an array of numbers between 0 and nnodes-1 that are the indexes of the nodes. 
Then the starting node must be swapped with the node 0.
There should be a separated function to make the swap (can be nice to have a timestamp print in it, can also be nice to 
have a debug checker function called here) and maybe also one to compute the best next node.
It better to have a temporary array to do all the operation and then an official best_solution array that can be updated only by
one function and that will always contain the current best solution.

 | 0 | 1 | 2 |...|c-1| c |c+1|...| n |        c = current node
 |                       |           |
 |-----visited nodes-----|-unvisited-|    <--- find best between unvisited and swap it with c+1, then do c=c+1

 We can try to start from all the nodes to find the best combination.

Doubts: 
    double *xcoord;
    double *ycoord;

    those contains the input nodes but not the solution, should we add a structure to memorize the solution? 
    Or it's better to let each algorithm build, use and return its own structure?

Optimization 2:
    If in the plot there are nodes, the solution is probably not good. We can add a follow-up optimization to remove 
    them after the greedy algorithm has finished. (see immagine.png)
    new cost should be ex cost - cost of removed edges + cost of added edges
    added edges < removed edges => new cost < old cost

Optimization 3:
    We can check if it would be good to swap all the couples until no swap would increment the solution.